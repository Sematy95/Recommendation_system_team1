package pro.sky.recommendation_service.domain;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.util.Objects;

/**
 * Represents statistics for a dynamic rule, tracking how many times it has been applied.
 * This entity is stored in the "statistics" table.
 */
@Entity
@Table(name = "statistics")
public class Statistic {

    /**
     * The unique identifier for the Statistic entity.
     * This is the primary key in the "statistics" table. It's auto-generated by the database.
     * The {@code @JsonIgnore} annotation prevents this ID from being included in JSON responses.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonIgnore
    private long id;

    /**
     * The DynamicRule for which these statistics are being tracked.
     * This represents a one-to-one relationship with the "dynamic_rule" table.
     * The {@code cascade = CascadeType.ALL} means that operations on this Statistic
     * will be cascaded to the associated DynamicRule (e.g., if you delete a Statistic,
     * the associated DynamicRule will also be deleted). The {@code @JoinColumn}
     * annotation specifies the foreign key column in the "statistics" table
     * ("rule_id") and the referenced column in the "dynamic_rule" table ("id").
     */
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "rule_id", referencedColumnName = "id")
    private DynamicRule dynamicRule;
    private long counts;

    /**
     * Default constructor for the Statistic entity. Required by JPA.
     */
    public Statistic() {
    }

    /**
     * Constructs a new Statistic object.
     *
     * @param dynamicRule The DynamicRule to associate with these statistics.
     * @param counts      The initial count of times the rule has been applied.
     */
    public Statistic(DynamicRule dynamicRule, long counts) {
        this.dynamicRule = dynamicRule;
        this.counts = counts;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public DynamicRule getDynamicRule() {
        return dynamicRule;
    }

    public void setDynamicRule(DynamicRule dynamicRule) {
        this.dynamicRule = dynamicRule;
    }

    public long getCount() {
        return counts;
    }

    public void setCount(long count) {
        this.counts = count;
    }

    public Statistic incrCount() {
        this.counts++;
        return this;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Statistic statistic = (Statistic) o;
        return id == statistic.id && counts == statistic.counts && Objects.equals(dynamicRule, statistic.dynamicRule);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, dynamicRule, counts);
    }

    @Override
    public String toString() {
        return "Statistic{" +
                "id=" + id +
                ", dynamicRule=" + dynamicRule +
                ", count=" + counts +
                '}';
    }
}
