2025-01-29 23:32:08.745552+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "WITH conditions_TT AS(SELECT C1 as TRUE_CONDITION FROM(SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'INVEST' LIMIT 1) THEN 1 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=1000) THEN 2 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = '[*]DEBIT' LIMIT 1) THEN 3 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END  UNION SELECT CASE WHEN EXISTS (SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END ) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 6 END  UNION SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'CREDIT' LIMIT 1) THEN 7 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 8 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits WITHDRAW withdraws) THEN 9 END )) SELECT * FROM dynamic_rule as d WHERE d.ID NOT IN (SELECT DISTINCT dynamic_rule_id FROM dynamic_rule_condition LEFT JOIN conditions_TT ON rules_id=true_condition WHERE true_condition IS NULL);"; ожидалось "[, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, GROUP BY, HAVING, WINDOW, QUALIFY, INTERSECT, UNION, EXCEPT, ORDER BY, OFFSET, FETCH, FOR, )"
Syntax error in SQL statement "WITH conditions_TT AS(SELECT C1 as TRUE_CONDITION FROM(SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'INVEST' LIMIT 1) THEN 1 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=1000) THEN 2 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = '[*]DEBIT' LIMIT 1) THEN 3 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END  UNION SELECT CASE WHEN EXISTS (SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END ) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 6 END  UNION SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'CREDIT' LIMIT 1) THEN 7 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 8 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits WITHDRAW withdraws) THEN 9 END )) SELECT * FROM dynamic_rule as d WHERE d.ID NOT IN (SELECT DISTINCT dynamic_rule_id FROM dynamic_rule_condition LEFT JOIN conditions_TT ON rules_id=true_condition WHERE true_condition IS NULL);"; expected "[, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, GROUP BY, HAVING, WINDOW, QUALIFY, INTERSECT, UNION, EXCEPT, ORDER BY, OFFSET, FETCH, FOR, )"; SQL statement:
WITH conditions_TT AS(SELECT C1 as TRUE_CONDITION FROM(SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'INVEST' LIMIT 1) THEN 1 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=1000) THEN 2 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'DEBIT' LIMIT 1) THEN 3 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END  UNION SELECT CASE WHEN EXISTS (SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END ) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 6 END  UNION SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'CREDIT' LIMIT 1) THEN 7 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 8 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits WITHDRAW withdraws) THEN 9 END )) SELECT * FROM dynamic_rule as d WHERE d.ID NOT IN (SELECT DISTINCT dynamic_rule_id FROM dynamic_rule_condition LEFT JOIN conditions_TT ON rules_id=true_condition WHERE true_condition IS NULL); [42001-232]
2025-01-31 20:21:39.496826+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "WITH conditions_TT AS(SELECT C1 as TRUE_CONDITION FROM(SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'INVEST' LIMIT 1) THEN 1 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=1000) THEN 2 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = '[*]DEBIT' LIMIT 1) THEN 3 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END  UNION SELECT CASE WHEN EXISTS (SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END ) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 6 END  UNION SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'CREDIT' LIMIT 1) THEN 7 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 8 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits WITHDRAW withdraws) THEN 9 END )) SELECT * FROM dynamic_rule as d WHERE d.ID NOT IN (SELECT DISTINCT dynamic_rule_id FROM dynamic_rule_condition LEFT JOIN conditions_TT ON rules_id=true_condition WHERE true_condition IS NULL);"; ожидалось "[, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, GROUP BY, HAVING, WINDOW, QUALIFY, INTERSECT, UNION, EXCEPT, ORDER BY, OFFSET, FETCH, FOR, )"
Syntax error in SQL statement "WITH conditions_TT AS(SELECT C1 as TRUE_CONDITION FROM(SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'INVEST' LIMIT 1) THEN 1 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=1000) THEN 2 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = '[*]DEBIT' LIMIT 1) THEN 3 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END  UNION SELECT CASE WHEN EXISTS (SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END ) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 6 END  UNION SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'CREDIT' LIMIT 1) THEN 7 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 8 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits WITHDRAW withdraws) THEN 9 END )) SELECT * FROM dynamic_rule as d WHERE d.ID NOT IN (SELECT DISTINCT dynamic_rule_id FROM dynamic_rule_condition LEFT JOIN conditions_TT ON rules_id=true_condition WHERE true_condition IS NULL);"; expected "[, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, GROUP BY, HAVING, WINDOW, QUALIFY, INTERSECT, UNION, EXCEPT, ORDER BY, OFFSET, FETCH, FOR, )"; SQL statement:
WITH conditions_TT AS(SELECT C1 as TRUE_CONDITION FROM(SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'INVEST' LIMIT 1) THEN 1 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=1000) THEN 2 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'DEBIT' LIMIT 1) THEN 3 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END  UNION SELECT CASE WHEN EXISTS (SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'SAVING' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT SUM(TRANSACTION_AMOUNT) savings FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT>=50000) THEN 4 END ) THEN 5 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 6 END  UNION SELECT CASE WHEN NOT EXISTS (SELECT * FROM TT WHERE PRODUCT_TYPE = 'CREDIT' LIMIT 1) THEN 7 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits null withdraws) THEN 8 END  UNION SELECT CASE WHEN EXISTS (SELECT * FROM ( (SELECT SUM(TRANSACTION_AMOUNT) deposits FROM TT WHERE PRODUCT_TYPE = 'DEBIT' AND TRANSACTION_TYPE = 'DEPOSIT' ) JOIN (SELECT SUM(TRANSACTION_AMOUNT) withdraws FROM TT WHERE PRODUCT_TYPE ='DEBIT' AND TRANSACTION_TYPE = 'WITHDRAW' ) )WHERE deposits WITHDRAW withdraws) THEN 9 END )) SELECT * FROM dynamic_rule as d WHERE d.ID NOT IN (SELECT DISTINCT dynamic_rule_id FROM dynamic_rule_condition LEFT JOIN conditions_TT ON rules_id=true_condition WHERE true_condition IS NULL); [42001-232]
